trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'portfolio-site'
  resourceGroup: 'portfolio-rg'            # ðŸ‘ˆ replace with your resource group name
  webAppName: 'portfolio-demo'             # ðŸ‘ˆ your web app name from Terraform
  acrLoginServer: 'portfolioregistrytf020qrb.azurecr.io'   # ðŸ‘ˆ from your Terraform output

steps:
# Step 1: Docker login to ACR
- task: Docker@2
  displayName: 'Login to ACR'
  inputs:
    command: login
    containerRegistry: 'Docker Reg'   # ðŸ‘ˆ must match your service connection name

# Step 2: Build & Push image to ACR
- task: Docker@2
  displayName: 'Build and Push Docker image'
  inputs:
    command: buildAndPush
    repository: '$(imageName)'
    dockerfile: '**/Dockerfile'
    containerRegistry: 'Docker Reg'
    tags: |
      $(Build.BuildId)
      latest

# Step 3: Update Azure Web App to use new image
- task: AzureCLI@2
  displayName: 'Update Web App container settings'
  inputs:
    azureSubscription: 'Dev-Portal'   # ðŸ‘ˆ your AzureRM service connection
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      echo "Updating Web App to use latest Docker image..."
      az webapp config container set \
        --resource-group $(resourceGroup) \
        --name $(webAppName) \
        --docker-custom-image-name $(acrLoginServer)/$(imageName):latest \
        --docker-registry-server-url https://$(acrLoginServer)
