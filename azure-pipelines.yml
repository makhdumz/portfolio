trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: DeployInfrastructure
  displayName: 'Deploy Terraform Infrastructure'
  jobs:
  - job: Terraform
    displayName: 'Run Terraform Apply'
    steps:
    # Install Terraform on the agent
    - script: |
        echo "Installing Terraform..."
        wget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
        unzip terraform_1.6.0_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform --version
      displayName: 'Install Terraform'

    # Terraform Init and Apply using Service Principal
    - script: |
        echo "Initializing Terraform..."
        terraform init

        echo "Applying Terraform..."
        terraform apply -auto-approve
      displayName: 'Terraform Init and Apply'
      env:
        ARM_CLIENT_ID: $(servicePrincipalId)
        ARM_CLIENT_SECRET: $(servicePrincipalKey)
        ARM_SUBSCRIPTION_ID: $(subscriptionId)
        ARM_TENANT_ID: $(tenantId)

- stage: BuildPushAndDeploy
  displayName: 'Build, Push, and Deploy Image'
  dependsOn: DeployInfrastructure
  jobs:
  - job: Docker
    displayName: 'Build, Push and Deploy'
    steps:
    # Log in to ACR using your Docker Registry service connection
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: 'login'
        containerRegistry: 'Docker Reg'   # must match service connection name exactly

    # Build and push image
    - task: Docker@2
      displayName: 'Build and Push Image to ACR'
      inputs:
        command: 'buildAndPush'
        repository: 'portfolio-site'
        dockerfile: '**/Dockerfile'
        tags: 'latest'

    # Deploy to Azure Web App (Container)
    - task: AzureWebAppContainer@1
      displayName: 'Deploy Container to App Service'
      inputs:
        azureSubscription: 'Dev Portal'   # must match service connection name exactly
        appName: 'portfolio-demo'
        imageName: 'portfolioregistrytf020qrb.azurecr.io/portfolio-site:latest'
